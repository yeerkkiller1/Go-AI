<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cloo</name>
    </assembly>
    <members>
        <member name="T:Cloo.ComputeEvent">
            <summary>
            Represents an OpenCL event.
            </summary>
            <remarks> An event object encapsulates the status of an operation such as a command. It can be used to synchronize operations in a context. </remarks>
            <seealso cref="T:Cloo.ComputeCommandQueue"/>
            <seealso cref="T:Cloo.ComputeContext"/>
        </member>
        <member name="T:Cloo.ComputeResource">
            <summary>
            Represents an OpenCL resource.
            </summary>
            <remarks> An OpenCL resource is an OpenCL object that can be created and destroyed by the application. </remarks>
            <seealso cref="T:Cloo.ComputeObject"/>
        </member>
        <member name="T:Cloo.ComputeObject">
            <summary>
            Represents an OpenCL object.
            </summary>
            <remarks> For the purposes of Cloo an OpenCL object is an object that is identified by its handle in the OpenCL environment. </remarks>
        </member>
        <member name="M:Cloo.ComputeObject.Equals(System.Object,System.Object)">
            <summary>
            Checks if two <c>object</c>s are equal. These <c>object</c>s must be cast from <c>ComputeObject</c>s.
            </summary>
            <param name="objA"> The first <c>object</c> to compare. </param>
            <param name="objB"> The second <c>object</c> to compare. </param>
            <returns> <c>true</c> if the <c>object</c>s are equal otherwise <c>false</c>. </returns>
        </member>
        <member name="M:Cloo.ComputeObject.Equals(System.Object)">
            <summary>
            Checks if the <c>ComputeObject</c> is equal to a specified <c>ComputeObject</c> cast to an <c>object</c>.
            </summary>
            <param name="obj"> The specified <c>object</c> to compare the <c>ComputeObject</c> with. </param>
            <returns> <c>true</c> if the <c>ComputeObject</c> is equal with <paramref name="obj"/> otherwise <c>false</c>. </returns>
        </member>
        <member name="M:Cloo.ComputeObject.Equals(Cloo.ComputeObject)">
            <summary>
            Checks if the <c>ComputeObject</c> is equal to a specified <c>ComputeObject</c>.
            </summary>
            <param name="obj"> The specified <c>ComputeObject</c> to compare the <c>ComputeObject</c> with. </param>
            <returns> <c>true</c> if the <c>ComputeObject</c> is equal with <paramref name="obj"/> otherwise <c>false</c>. </returns>
        </member>
        <member name="M:Cloo.ComputeObject.GetHashCode">
            <summary>
            Gets the hash code of the <c>ComputeObject</c>.
            </summary>
            <returns> The hash code of the <c>ComputeObject</c>. </returns>
        </member>
        <member name="M:Cloo.ComputeObject.ToString">
            <summary>
            Gets the string representation of the <c>ComputeObject</c>.
            </summary>
            <returns> The string representation of the <c>ComputeObject</c>. </returns>
        </member>
        <member name="P:Cloo.ComputeObject.Handle">
            <summary>
            Gets or sets (protected) the handle of the <c>ComputeObject</c>.
            </summary>
        </member>
        <member name="M:Cloo.ComputeResource.Dispose">
            <summary>
            Destroys the <c>ComputeResource</c> and frees its accompanying OpenCL resources.
            </summary>
        </member>
        <member name="M:Cloo.ComputeEvent.ToString">
            <summary>
            Gets the string representation of the <c>ComputeEvent</c>.
            </summary>
            <returns> The string representation of the <c>ComputeEvent</c>. </returns>
        </member>
        <member name="P:Cloo.ComputeEvent.CommandQueue">
            <summary>
            Gets the <c>ComputeCommandQueue</c> associated with the <c>ComputeEvent</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeEvent.CommandType">
            <summary>
            Gets the <c>ComputeCommandType</c> associated with the <c>ComputeEvent</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeEvent.CommandFinishTime">
            <summary>
            Gets a 64-bit value that describes the current <c>ComputeEvent.CommandQueue.Device</c> time counter in nanoseconds when the command identified by the <c>ComputeEvent</c> has finished execution.
            </summary>
        </member>
        <member name="P:Cloo.ComputeEvent.CommandEnqueueTime">
            <summary>
            Gets a 64-bit value that describes the current <c>ComputeEvent.CommandQueue.Device</c> time counter in nanoseconds when the command identified by the <c>ComputeEvent</c> is enqueued in the <c>ComputeEvent.CommandQueue</c> by the host.
            </summary>
        </member>
        <member name="P:Cloo.ComputeEvent.CommandStartTime">
            <summary>
            Gets a 64-bit value that describes the current <c>ComputeEvent.CommandQueue.Device</c> time counter in nanoseconds when the command identified by the <c>ComputeEvent</c> starts execution.
            </summary>
        </member>
        <member name="P:Cloo.ComputeEvent.CommandSubmitTime">
            <summary>
            Gets a 64-bit value that describes the current <c>ComputeEvent.CommandQueue.Device</c> time counter in nanoseconds when the command identified by the <c>ComputeEvent</c> that has been enqueued is submitted by the host to the <c>ComputeEvent.CommandQueue.Device</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeEvent.ExecutionStatus">
            <summary>
            Gets the execution status of the command identified by the <c>ComputeEvent</c>.
            </summary>
        </member>
        <member name="T:Cloo.ComputeImage2D">
            <summary>
            Represents an OpenCL 2D image.
            </summary>
            <seealso cref="T:Cloo.ComputeImage"/>
        </member>
        <member name="T:Cloo.ComputeImage">
            <summary>
            Represents an OpenCL image.
            </summary>
            <remarks> A memory object that stores a two- or three- dimensional structured array. Image data can only be accessed with read and write functions. The read functions use a sampler. </remarks>
            <seealso cref="T:Cloo.ComputeMemory"/>
            <seealso cref="T:Cloo.ComputeSampler"/>
        </member>
        <member name="T:Cloo.ComputeMemory">
            <summary>
            Represents an OpenCL memory object.
            </summary>
            <remarks> A memory object is a handle to a region of global memory. </remarks>
            <seealso cref="!:ComputeBuffer"/>
            <seealso cref="T:Cloo.ComputeImage"/>
        </member>
        <member name="P:Cloo.ComputeMemory.Context">
            <summary>
            Gets the <c>ComputeContext</c> of the <c>ComputeMemory</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeMemory.Flags">
            <summary>
            Gets the <c>ComputeMemoryFlags</c> of the <c>ComputeMemory</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeMemory.Size">
            <summary>
            Gets or sets (protected) the size in bytes of the <c>ComputeMemory</c>.
            </summary>
        </member>
        <member name="M:Cloo.ComputeImage.ToString">
            <summary>
            Gets the string representation of the <c>ComputeImage</c>.
            </summary>
            <returns> The string representation of the <c>ComputeImage</c>. </returns>
        </member>
        <member name="P:Cloo.ComputeImage.Depth">
            <summary>
            Gets or sets (protected) the depth in pixels of the <c>ComputeImage</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeImage.ElementSize">
            <summary>
            Gets or sets (protected) the size of the elements (pixels) of the <c>ComputeImage</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeImage.Height">
            <summary>
            Gets or sets (protected) the height in pixels of the <c>ComputeImage</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeImage.RowPitch">
            <summary>
            Gets or sets (protected) the size in bytes of a row of elements of the <c>ComputeImage</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeImage.SlicePitch">
            <summary>
            Gets or sets (protected) the size in bytes of a 2D slice of a <c>ComputeImage3D</c>. For a <c>ComputeImage2D</c> this value is 0.
            </summary>
        </member>
        <member name="P:Cloo.ComputeImage.Width">
            <summary>
            Gets or sets (protected) the width in pixels of the <c>ComputeImage</c>.
            </summary>
        </member>
        <member name="M:Cloo.ComputeImage2D.#ctor(Cloo.ComputeContext,Cloo.ComputeMemoryFlags,Cloo.ComputeImageFormat,System.Int32,System.Int32,System.Int64,System.IntPtr)">
            <summary>
            Creates a new <c>ComputeImage2D</c>.
            </summary>
            <param name="context"> A valid <c>ComputeContext</c> in which the <c>ComputeImage2D</c> is created. </param>
            <param name="flags"> A bit-field that is used to specify allocation and usage information about the <c>ComputeImage2D</c>. </param>
            <param name="format"> A structure that describes the format properties of the <c>ComputeImage2D</c>. </param>
            <param name="width"> The width of the <c>ComputeImage2D</c> in pixels. </param>
            <param name="height"> The height of the <c>ComputeImage2D</c> in pixels. </param>
            <param name="rowPitch"> The size in bytes of each row of elements of the <c>ComputeImage2D</c>. If <paramref name="rowPitch"/> is zero, OpenCL will compute the proper value based on <c>ComputeImage.Width</c> and <c>ComputeImage.ElementSize</c>. </param>
            <param name="data"> The data to initialize the <c>ComputeImage2D</c>. Can be <c>IntPtr.Zero</c>. </param>
        </member>
        <member name="M:Cloo.ComputeImage2D.CreateFromGLRenderbuffer(Cloo.ComputeContext,Cloo.ComputeMemoryFlags,System.Int32)">
            <summary>
            Creates a new <c>ComputeImage2D</c> from an OpenGL renderbuffer object.
            </summary>
            <param name="context"> A <c>ComputeContext</c> with enabled CL/GL sharing. </param>
            <param name="flags"> A bit-field that is used to specify usage information about the <c>ComputeImage2D</c>. Only <c>ComputeMemoryFlags.ReadOnly</c>, <c>ComputeMemoryFlags.WriteOnly</c> and <c>ComputeMemoryFlags.ReadWrite</c> are allowed. </param>
            <param name="renderbufferId"> The OpenGL renderbuffer object id to use. </param>
            <returns> The created <c>ComputeImage2D</c>. </returns>
        </member>
        <member name="M:Cloo.ComputeImage2D.CreateFromGLTexture2D(Cloo.ComputeContext,Cloo.ComputeMemoryFlags,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <c>ComputeImage2D</c> from an OpenGL 2D texture object.
            </summary>
            <param name="context"> A <c>ComputeContext</c> with enabled CL/GL sharing. </param>
            <param name="flags"> A bit-field that is used to specify usage information about the <c>ComputeImage2D</c>. Only <c>ComputeMemoryFlags.ReadOnly</c>, <c>ComputeMemoryFlags.WriteOnly</c> and <c>ComputeMemoryFlags.ReadWrite</c> are allowed. </param>
            <param name="textureTarget"> One of the following values: GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_RECTANGLE. Using GL_TEXTURE_RECTANGLE for texture_target requires OpenGL 3.1. Alternatively, GL_TEXTURE_RECTANGLE_ARB may be specified if the OpenGL extension GL_ARB_texture_rectangle is supported. </param>
            <param name="mipLevel"> The mipmap level of the OpenGL 2D texture object to be used. </param>
            <param name="textureId"> The OpenGL 2D texture object id to use. </param>
            <returns> The created <c>ComputeImage2D</c>. </returns>
        </member>
        <member name="M:Cloo.ComputeImage2D.GetSupportedFormats(Cloo.ComputeContext,Cloo.ComputeMemoryFlags)">
            <summary>
            Gets a collection of supported <c>ComputeImage2D</c> <c>ComputeImageFormat</c>s in a <c>ComputeContext</c>.
            </summary>
            <param name="context"> The <c>ComputeContext</c> for which the collection of <c>ComputeImageFormat</c>s is queried. </param>
            <param name="flags"> The <c>ComputeMemoryFlags</c> for which the collection of <c>ComputeImageFormat</c>s is queried. </param>
            <returns> The collection of the required <c>ComputeImageFormat</c>s. </returns>
        </member>
        <member name="T:Cloo.ComputeImage3D">
            <summary>
            Represents an OpenCL 3D image.
            </summary>
            <seealso cref="T:Cloo.ComputeImage"/>
        </member>
        <member name="M:Cloo.ComputeImage3D.#ctor(Cloo.ComputeContext,Cloo.ComputeMemoryFlags,Cloo.ComputeImageFormat,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.IntPtr)">
            <summary>
            Creates a new <c>ComputeImage3D</c>.
            </summary>
            <param name="context"> A valid <c>ComputeContext</c> in which the <c>ComputeImage3D</c> is created. </param>
            <param name="flags"> A bit-field that is used to specify allocation and usage information about the <c>ComputeImage3D</c>. </param>
            <param name="format"> A structure that describes the format properties of the <c>ComputeImage3D</c>. </param>
            <param name="width"> The width of the <c>ComputeImage3D</c> in pixels. </param>
            <param name="height"> The height of the <c>ComputeImage3D</c> in pixels. </param>
            <param name="depth"> The depth of the <c>ComputeImage3D</c> in pixels. </param>
            <param name="rowPitch"> The size in bytes of each row of elements of the <c>ComputeImage3D</c>. If <paramref name="rowPitch"/> is zero, OpenCL will compute the proper value based on <c>ComputeImage.Width</c> and <c>ComputeImage.ElementSize</c>. </param>
            <param name="slicePitch"> The size in bytes of each 2D slice in the <c>ComputeImage3D</c>. If <paramref name="slicePitch"/> is zero, OpenCL will compute the proper value based on <c>ComputeImage.RowPitch</c> and <c>ComputeImage.Height</c>. </param>
            <param name="data"> The data to initialize the <c>ComputeImage3D</c>. Can be <c>IntPtr.Zero</c>. </param>
        </member>
        <member name="M:Cloo.ComputeImage3D.CreateFromGLTexture3D(Cloo.ComputeContext,Cloo.ComputeMemoryFlags,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <c>ComputeImage3D</c> from an OpenGL 3D texture object.
            </summary>
            <param name="context"> A <c>ComputeContext</c> with enabled CL/GL sharing. </param>
            <param name="flags"> A bit-field that is used to specify usage information about the <c>ComputeImage3D</c>. Only <c>ComputeMemoryFlags.ReadOnly</c>, <c>ComputeMemoryFlags.WriteOnly</c> and <c>ComputeMemoryFlags.ReadWrite</c> are allowed. </param>
            <param name="textureTarget"> The image type of texture. Must be GL_TEXTURE_3D. </param>
            <param name="mipLevel"> The mipmap level of the OpenGL 2D texture object to be used. </param>
            <param name="textureId"> The OpenGL 2D texture object id to use. </param>
            <returns> The created <c>ComputeImage2D</c>. </returns>
        </member>
        <member name="M:Cloo.ComputeImage3D.GetSupportedFormats(Cloo.ComputeContext,Cloo.ComputeMemoryFlags)">
            <summary>
            Gets a collection of supported <c>ComputeImage3D</c> <c>ComputeImageFormat</c>s in a <c>ComputeContext</c>.
            </summary>
            <param name="context"> The <c>ComputeContext</c> for which the collection of <c>ComputeImageFormat</c>s is queried. </param>
            <param name="flags"> The <c>ComputeMemoryFlags</c> for which the collection of <c>ComputeImageFormat</c>s is queried. </param>
            <returns> The collection of the required <c>ComputeImageFormat</c>s. </returns>
        </member>
        <member name="T:Cloo.ComputeCompiler">
            <summary>
            Represents the OpenCL compiler.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCompiler.Unload">
            <summary>
            Unloads the OpenCL compiler.
            </summary>
        </member>
        <member name="T:Cloo.ComputeContext">
            <summary>
            Represents an OpenCL context.
            </summary>
            <remarks> The environment within which the kernels execute and the domain in which synchronization and memory management is defined. </remarks>
            <br/>
            <example> 
            This example shows how to create a <c>ComputeContext</c> that is able to share data with an OpenGL context in a Microsoft Windows OS:
            <code>
            [DllImport("opengl32.dll")]
            extern static IntPtr wglGetCurrentDC();
            // ...
            IntPtr deviceContextHandle = wglGetCurrentDC();
            ComputePlatform platform = ComputePlatform.GetByName(nameOfPlatformCapableOfCLGLInterop);
            ComputeContextProperty p1 = new ComputeContextProperty(ComputeContextPropertyName.Platform, platform.Handle);
            ComputeContextProperty p2 = new ComputeContextProperty(ComputeContextPropertyName.CL_GL_CONTEXT_KHR, openGLContextHandle);
            ComputeContextProperty p3 = new ComputeContextProperty(ComputeContextPropertyName.CL_WGL_HDC_KHR, deviceContextHandle);
            ComputeContextPropertyList cpl = new ComputeContextPropertyList(new ComputeContextProperty[] { p1, p2, p3 });
            ComputeContext context = new ComputeContext(ComputeDeviceTypes.Gpu, cpl, null, IntPtr.Zero);
            </code>
            </example>
            <seealso cref="T:Cloo.ComputeDevice"/>
            <seealso cref="T:Cloo.ComputePlatform"/>
        </member>
        <member name="M:Cloo.ComputeContext.#ctor(System.Collections.Generic.ICollection{Cloo.ComputeDevice},Cloo.ComputeContextPropertyList,Cloo.ComputeContextNotifier,System.IntPtr)">
            <summary>
            Creates a new <c>ComputeContext</c> on a collection of <c>ComputeDevice</c>s.
            </summary>
            <param name="devices"> A collection of <c>ComputeDevice</c>s to associate with the <c>ComputeContext</c>. </param>
            <param name="properties"> A <c>ComputeContextPropertyList</c> of the <c>ComputeContext</c>. </param>
            <param name="notify"> A callback function that can be registered by the application. This callback function will be used by the OpenCL implementation to report information on errors that occur in the <c>ComputeContext</c>. This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. If <paramref name="notify"/> is <c>null</c>, no callback function is registered. </param>
            <param name="notifyDataPtr"> Optional user data that will be passed to <paramref name="notify"/>. </param>
        </member>
        <member name="M:Cloo.ComputeContext.#ctor(Cloo.ComputeDeviceTypes,Cloo.ComputeContextPropertyList,Cloo.ComputeContextNotifier,System.IntPtr)">
            <summary>
            Creates a new <c>ComputeContext</c> on all the <c>ComputeDevice</c>s that match the specified <c>ComputeDeviceTypes</c>.
            </summary>
            <param name="deviceType"> A bit-field that identifies the type of <c>ComputeDevice</c> to associate with the <c>ComputeContext</c>. </param>
            <param name="properties"> A <c>ComputeContextPropertyList</c> of the <c>ComputeContext</c>. </param>
            <param name="notify"> A callback function that can be registered by the application. This callback function will be used by the OpenCL implementation to report information on errors that occur in the <c>ComputeContext</c>. This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. If <paramref name="notify"/> is <c>null</c>, no callback function is registered. </param>
            <param name="userDataPtr"> Optional user data that will be passed to <paramref name="notify"/>. </param>
        </member>
        <member name="M:Cloo.ComputeContext.ToString">
            <summary>
            Gets the string representation of the <c>ComputeContext</c>.
            </summary>
            <returns> The string representation of the <c>ComputeContext</c>. </returns>
        </member>
        <member name="P:Cloo.ComputeContext.Devices">
            <summary>
            Gets a read-only collection of the <c>ComputeDevice</c>s of the <c>ComputeContext</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeContext.Platform">
            <summary>
            Gets the <c>ComputePlatform</c> of the <c>ComputeContext</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeContext.Properties">
            <summary>
            Gets a collection of <c>ComputeContextProperty</c>s of the <c>ComputeContext</c>.
            </summary>
        </member>
        <member name="T:Cloo.ComputeContextNotifier">
            <summary>
            A callback function that can be registered by the application to report information on errors that occur in the <c>ComputeContext</c>.
            </summary>
            <param name="errorInfo"> An error string. </param>
            <param name="clDataPtr"> A pointer to binary data that is returned by the OpenCL implementation that can be used to log additional information helpful in debugging the error.</param>
            <param name="clDataSize"> The size of the binary data that is returned by the OpenCL. </param>
            <param name="userDataPtr"> The pointer to the optional user data specified in <paramref name="notifyDataPtr"/> argument of <c>ComputeContext</c> constructor. </param>
            <remarks> This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. </remarks>
        </member>
        <member name="T:Cloo.ComputeContextProperty">
            <summary>
            Represents an OpenCL context property.
            </summary>
            <remarks> An OpenCL context property is a (name, value) data pair. </remarks>
        </member>
        <member name="M:Cloo.ComputeContextProperty.#ctor(Cloo.ComputeContextPropertyName,System.IntPtr)">
            <summary>
            Creates a new <c>ComputeContextProperty</c>.
            </summary>
            <param name="name"> The name of the <c>ComputeContextProperty</c>. </param>
            <param name="value"> The value of the created <c>ComputeContextProperty</c>. </param>
        </member>
        <member name="M:Cloo.ComputeContextProperty.ToString">
            <summary>
            Gets the string representation of the <c>ComputeContextProperty</c>.
            </summary>
            <returns> The string representation of the <c>ComputeContextProperty</c>. </returns>
        </member>
        <member name="P:Cloo.ComputeContextProperty.Name">
            <summary>
            Gets the <c>ComputeContextPropertyName</c> of the <c>ComputeContextProperty</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeContextProperty.Value">
            <summary>
            Gets the value of the <c>ComputeContextProperty</c>.
            </summary>
        </member>
        <member name="T:Cloo.ComputeKernel">
            <summary>
            Represents an OpenCL kernel.
            </summary>
            <remarks> A kernel object encapsulates a specific kernel function declared in a program and the argument values to be used when executing this kernel function. </remarks>
            <seealso cref="T:Cloo.ComputeCommandQueue"/>
            <seealso cref="T:Cloo.ComputeProgram"/>
        </member>
        <member name="M:Cloo.ComputeKernel.GetLocalMemorySize(Cloo.ComputeDevice)">
            <summary>
            Gets the amount of local memory in bytes used by the <c>ComputeKernel</c>.
            </summary>
            <param name="device"> One of the <c>ComputeKernel.Program.Device</c>s. </param>
            <returns> The amount of local memory in bytes used by the <c>ComputeKernel</c>. </returns>
        </member>
        <member name="M:Cloo.ComputeKernel.GetCompileWorkGroupSize(Cloo.ComputeDevice)">
            <summary>
            Gets the compile work-group size specified by the <c>__attribute__((reqd_work_group_size(X, Y, Z)))</c> qualifier.
            </summary>
            <param name="device"> One of the <c>ComputeKernel.Program.Device</c>s. </param>
            <returns> The compile work-group size specified by the <c>__attribute__((reqd_work_group_size(X, Y, Z)))</c> qualifier. If such qualifier is not specified, (0, 0, 0) is returned. </returns>
        </member>
        <member name="M:Cloo.ComputeKernel.GetWorkGroupSize(Cloo.ComputeDevice)">
            <summary>
            Gets the maximum work-group size that can be used to execute the <c>ComputeKernel</c> on a <c>ComputeDevice</c>.
            </summary>
            <param name="device"> One of the <c>ComputeKernel.Program.Device</c>s. </param>
            <returns> The maximum work-group size that can be used to execute the <c>ComputeKernel</c> on <paramref name="device"/>. </returns>
        </member>
        <member name="M:Cloo.ComputeKernel.SetArgument(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Sets a value argument of the <c>ComputeKernel</c>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="dataSize"> The size of the argument data in bytes. </param>
            <param name="dataAddr"> A pointer to the data that should be used as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by a kernel. </remarks>
        </member>
        <member name="M:Cloo.ComputeKernel.SetLocalArgument(System.Int32,System.Int64)">
            <summary>
            Sets the size in bytes of an argument specfied with the <c>local</c> address space qualifier.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="dataSize"> The size of the argument data in bytes. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by a kernel. </remarks>
        </member>
        <member name="M:Cloo.ComputeKernel.SetMemoryArgument(System.Int32,Cloo.ComputeMemory)">
            <summary>
            Sets a <c>T*</c>, <c>image2d_t</c> or <c>image3d_t</c> argument of the <c>ComputeKernel</c>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="memObj"> The <c>ComputeMemory</c> that is passed as the argument. </param>
            <remarks> This method will automatically track <paramref name="memObj"/> to prevent it from being collected by the GC.<br/> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by a kernel. </remarks>
        </member>
        <member name="M:Cloo.ComputeKernel.SetMemoryArgument(System.Int32,Cloo.ComputeMemory,System.Boolean)">
            <summary>
            Sets a <c>T*</c>, <c>image2d_t</c> or <c>image3d_t</c> argument of the <c>ComputeKernel</c>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="memObj"> The <c>ComputeMemory</c> that is passed as the argument. </param>
            <param name="track"> Specify whether the kernel should prevent garbage collection of the <paramref name="memObj"/> until <c>ComputeKernel</c> execution. This is useful if the application code doesn't refer to <paramref name="memObj"/> after this call or forces a <c>GC.Collect()</c> between this call and the <c>ComputeKernel</c> execution. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by a kernel. </remarks>
        </member>
        <member name="M:Cloo.ComputeKernel.SetSamplerArgument(System.Int32,Cloo.ComputeSampler)">
            <summary>
            Sets a <c>sampler_t</c> argument of the <c>ComputeKernel</c>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="sampler"> The <c>ComputeSampler</c> that is passed as the argument. </param>
            <remarks> This method will automatically track <paramref name="sampler"/> to prevent it from being collected by the GC.<br/> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by a kernel. </remarks>
        </member>
        <member name="M:Cloo.ComputeKernel.SetSamplerArgument(System.Int32,Cloo.ComputeSampler,System.Boolean)">
            <summary>
            Sets a <c>sampler_t</c> argument of the <c>ComputeKernel</c>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="sampler"> The <c>ComputeSampler</c> that is passed as the argument. </param>
            <param name="track"> Specify whether the kernel should prevent garbage collection of the <paramref name="sampler"/> until <c>ComputeKernel</c> execution. This is useful if the application code doesn't refer to <paramref name="sampler"/> after this call or forces a <c>GC.Collect()</c> between this call and the <c>ComputeKernel</c> execution. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by a kernel. </remarks>
        </member>
        <member name="M:Cloo.ComputeKernel.SetValueArgument``1(System.Int32,``0)">
            <summary>
            Sets a value argument of the <c>ComputeKernel</c>.
            </summary>
            <typeparam name="T"> The type of the argument. </typeparam>
            <param name="index"> The argument index. </param>
            <param name="data"> The data that is passed as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by a kernel. </remarks>
        </member>
        <member name="M:Cloo.ComputeKernel.ToString">
            <summary>
            Gets the string representation of the <c>ComputeKernel</c>.
            </summary>
            <returns> The string representation of the <c>ComputeKernel</c>. </returns>
        </member>
        <member name="P:Cloo.ComputeKernel.Context">
            <summary>
            Gets the <c>ComputeContext</c> associated with the <c>ComputeKernel</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeKernel.FunctionName">
            <summary>
            Gets the function name of the <c>ComputeKernel</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeKernel.Program">
            <summary>
            Gets the <c>ComputeProgram</c> that the <c>ComputeKernel</c> belongs to.
            </summary>
        </member>
        <member name="T:Cloo.ComputeEventList">
            <summary>
            Represents a list of <c>ComputeEvent</c>s.
            </summary>
            <seealso cref="T:Cloo.ComputeCommandQueue"/>
            <seealso cref="T:Cloo.ComputeEvent"/>
        </member>
        <member name="M:Cloo.ComputeEventList.#ctor">
            <summary>
            Creates an empty <c>ComputeEventList</c>.
            </summary>
        </member>
        <member name="M:Cloo.ComputeEventList.#ctor(System.Collections.Generic.IList{Cloo.ComputeEvent})">
            <summary>
            Creates a new <c>ComputeEventList</c> from an existing list of <c>ComputeEvent</c>s.
            </summary>
            <param name="events"> A list of <c>ComputeEvent</c>s. </param>
        </member>
        <member name="M:Cloo.ComputeEventList.Wait">
            <summary>
            Waits on the host thread for the <c>ComputeEvent</c>s in the <c>ComputeEventList</c> to complete.
            </summary>
        </member>
        <member name="T:Cloo.Bindings.CL11">
            <summary>
            Contains bindings to the OpenCL 1.1 functions.
            </summary>
            <remarks> See the OpenCL specification for documentation regarding these functions. </remarks>
        </member>
        <member name="T:Cloo.Bindings.CL10">
            <summary>
            Contains bindings to the OpenCL 1.0 functions.
            </summary>
            <remarks> See the OpenCL specification for documentation regarding these functions. </remarks>
        </member>
        <member name="T:Cloo.Tools">
            <summary>
            Contains various helper methods.
            </summary>
        </member>
        <member name="T:Cloo.ComputeCommandQueue">
            <summary>
            Represents an OpenCL command queue.
            </summary>
            <remarks> An object that holds commands that will be executed on a specific device. The command-queue is created on a specific device in a context. Commands to a command-queue are queued in-order but may be executed in-order or out-of-order. </remarks>
            <seealso cref="T:Cloo.ComputeContext"/>
            <seealso cref="T:Cloo.ComputeDevice"/>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.#ctor(Cloo.ComputeContext,Cloo.ComputeDevice,Cloo.ComputeCommandQueueFlags)">
            <summary>
            Creates a new <c>ComputeCommandQueue</c>.
            </summary>
            <param name="context"> A <c>ComputeContext</c>. </param>
            <param name="device"> A <c>ComputeDevice</c> associated with the <paramref name="context"/>. It can either be one of <c>ComputeContext.Devices</c> or have the same <c>ComputeDeviceTypes</c> as the <paramref name="device"/> specified when the <paramref name="context"/> is created. </param>
            <param name="properties"> The properties for the <c>ComputeCommandQueue</c>. </param>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.AcquireGLObjects(System.Collections.Generic.ICollection{Cloo.ComputeMemory},System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to acquire a collection of <c>ComputeMemory</c>s that have been previously created from OpenGL objects.
            </summary>
            <param name="memObjs"> A collection of <c>ComputeMemory</c>s that correspond to OpenGL memory objects. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.AddBarrier">
            <summary>
            Enqueues a barrier.
            </summary>
            <remarks> A barrier ensures that all queued commands have finished execution before the next batch of commands can begin execution. </remarks>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.AddMarker">
            <summary>
            Enqueues a marker.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Copy``1(Cloo.ComputeBuffer{``0},Cloo.ComputeBuffer{``0},System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Copy``1(Cloo.ComputeBuffer{``0},Cloo.ComputeBuffer{``0},System.Int64,System.Int64,System.Int64,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to copy data between <c>ComputeBuffer</c>s.
            </summary>
            <param name="source"> The <c>ComputeBuffer</c> to copy from. </param>
            <param name="destination"> The <c>ComputeBuffer</c> to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> offset in elements where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> offset in elements where writing starts. </param>
            <param name="count"> The number of elements to copy. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Copy``1(Cloo.ComputeBuffer{``0},Cloo.ComputeImage,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Copy``1(Cloo.ComputeBuffer{``0},Cloo.ComputeImage,System.Int64,System.Int64[],System.Int64[],System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to copy data from <c>ComputeBuffer</c> to <c>ComputeImage</c>.
            </summary>
            <param name="source"> The <c>ComputeBuffer</c> to copy from. </param>
            <param name="destination"> The <c>ComputeImage</c> to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> offset in elements where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> (x, y, z) offset in pixels where writing starts. </param>
            <param name="region"> The region (width, height, depth) in pixels to copy. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Copy``1(Cloo.ComputeImage,Cloo.ComputeBuffer{``0},System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Copy``1(Cloo.ComputeImage,Cloo.ComputeBuffer{``0},System.Int64[],System.Int64,System.Int64[],System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to copy data from <c>ComputeImage</c> to <c>ComputeBuffer</c>.
            </summary>
            <param name="source"> The <c>ComputeImage</c> to copy from. </param>
            <param name="destination"> The <c>ComputeBuffer</c> to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> (x, y, z) offset in pixels where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> offset in elements where writing starts. </param>
            <param name="region"> The region (width, height, depth) in pixels to copy. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Copy(Cloo.ComputeImage,Cloo.ComputeImage,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Copy(Cloo.ComputeImage,Cloo.ComputeImage,System.Int64[],System.Int64[],System.Int64[],System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to copy data between <c>ComputeImage</c>s.
            </summary>
            <param name="source"> The <c>ComputeImage</c> to copy from. </param>
            <param name="destination"> The <c>ComputeImage</c> to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> (x, y, z) offset in pixels where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> (x, y, z) offset in pixels where writing starts. </param>
            <param name="region"> The region (width, height, depth) in pixels to copy. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.ExecuteTask(Cloo.ComputeKernel,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to execute a single <c>ComputeKernel</c>.
            </summary>
            <param name="kernel"> The <c>ComputeKernel</c> to execute. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Execute(Cloo.ComputeKernel,System.Int64[],System.Int64[],System.Int64[],System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to parallely execute a range of <c>ComputeKernel</c>s.
            </summary>
            <param name="kernel"> The <c>ComputeKernel</c> to execute. </param>
            <param name="globalWorkOffset"> An array of values that describe the offset used to calculate the global ID of a work-item instead of having the global IDs always start at offset (0, 0,... 0). </param>
            <param name="globalWorkSize"> An array of values that describe the number of global work-items in dimensions that will execute the kernel function. The total number of global work-items is computed as global_work_size[0] *...* global_work_size[work_dim - 1]. </param>
            <param name="localWorkSize"> An array of values that describe the number of work-items that make up a work-group (also referred to as the size of the work-group) that will execute the <paramref name="kernel"/>. The total number of work-items in a work-group is computed as local_work_size[0] *... * local_work_size[work_dim - 1]. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Finish">
            <summary>
            Blocks until all previously queued OpenCL commands in the <c>ComputeCommandQueue</c> are issued to the <c>ComputeCommandQueue.Device</c> and have completed.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Flush">
            <summary>
            Issues all previously queued OpenCL commands in the <c>ComputeCommandQueue</c> to the <c>ComputeCommandQueue.Device</c>.
            </summary>
            <remarks> This method only guarantees that all queued commands get issued to the OpenCL device. There is no guarantee that they will be complete after this method returns. </remarks>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Map``1(Cloo.ComputeBuffer{``0},System.Boolean,Cloo.ComputeMemoryMappingFlags,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Map``1(Cloo.ComputeBuffer{``0},System.Boolean,Cloo.ComputeMemoryMappingFlags,System.Int64,System.Int64,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to map a part of a <c>ComputeBuffer</c> into the host address space.
            </summary>
            <param name="buffer"> The <c>ComputeBuffer</c> to map. </param>
            <param name="blocking">  The mode of operation of this call. </param>
            <param name="flags"> A list of properties for the mapping mode. </param>
            <param name="offset"> The <paramref name="source"/> offset in elements where mapping starts. </param>
            <param name="count"> The number of elements to map. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after enqueueing the command in the <c>ComputeCommandQueue</c>. </remarks>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Map(Cloo.ComputeImage,System.Boolean,Cloo.ComputeMemoryMappingFlags,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Map(Cloo.ComputeImage,System.Boolean,Cloo.ComputeMemoryMappingFlags,System.Int64[],System.Int64[],System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to map a part of a <c>ComputeImage</c> into the host address space.
            </summary>
            <param name="image"> The <c>ComputeImage</c> to map. </param>
            <param name="blocking"> The mode of operation of this call. </param>
            <param name="flags"> A list of properties for the mapping mode. </param>
            <param name="offset"> The <paramref name="source"/> (x, y, z) offset in pixels where mapping starts. </param>
            <param name="region"> The region (width, height, depth) in pixels to map. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after enqueueing the command in the <c>ComputeCommandQueue</c>. </remarks>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Read``1(Cloo.ComputeBuffer{``0},System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Read``1(Cloo.ComputeBuffer{``0},System.Int64,System.Int64,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Read``1(Cloo.ComputeBuffer{``0},System.Boolean,System.Int64,System.Int64,System.IntPtr,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to read data from a <c>ComputeBuffer</c>.
            </summary>
            <param name="buffer"> The buffer to read from. </param>
            <param name="blocking"> The mode of operation of this call. </param>
            <param name="offset"> The offset in elements where reading starts. </param>
            <param name="count"> The number of elements to read. </param>
            <param name="data"> A preallocated memory area to read the data into. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after enqueueing the command in the <c>ComputeCommandQueue</c>. </remarks>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Read(Cloo.ComputeImage,System.Boolean,System.IntPtr,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Read(Cloo.ComputeImage,System.Boolean,System.Int64[],System.Int64[],System.IntPtr,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Read(Cloo.ComputeImage,System.Boolean,System.Int64[],System.Int64[],System.Int64,System.Int64,System.IntPtr,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to read data from a <c>ComputeImage</c>.
            </summary>
            <param name="image"> The <c>ComputeImage</c> to read from. </param>
            <param name="blocking"> The mode of operation of this call. </param>
            <param name="offset"> The (x, y, z) offset in pixels where reading starts. </param>
            <param name="region"> The region (width, height, depth) in pixels to read. </param>
            <param name="rowPitch"> The <c>ComputeImage.RowPitch</c> or 0. </param>
            <param name="slicePitch"> The <c>ComputeImage.SlicePitch</c> or 0. </param>
            <param name="data"> A preallocated memory area to read the data into. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after enqueueing the command in the <c>ComputeCommandQueue</c>. </remarks>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.ReleaseGLObjects(System.Collections.Generic.ICollection{Cloo.ComputeMemory},System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to release <c>ComputeMemory</c>s that have been created from OpenGL objects.
            </summary>
            <param name="memObjs"> A collection of <c>ComputeMemory</c>s that correspond to OpenGL memory objects. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.ToString">
            <summary>
            Gets the string representation of the <c>ComputeCommandQueue</c>.
            </summary>
            <returns> The string representation of the <c>ComputeCommandQueue</c>. </returns>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Unmap(Cloo.ComputeMemory,System.IntPtr@,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to unmap a <c>ComputeBuffer</c> or a <c>ComputeImage</c> from the host address space.
            </summary>
            <param name="memory"> The <c>ComputeMemory</c>. </param>
            <param name="mappedPtr"> The host address returned by a previous call to <c>ComputeCommandQueue.Map</c>. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Wait(System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a wait command for a collection of <c>ComputeEvent</c>s to complete before any future commands queued in the <c>ComputeCommandQueue</c> are executed.
            </summary>
            <param name="events"> The <c>ComputeEvent</c>s that this command will wait for. </param>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Write``1(Cloo.ComputeBuffer{``0},``0[],System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Write``1(Cloo.ComputeBuffer{``0},System.Int64,System.Int64,``0[],System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Write``1(Cloo.ComputeBuffer{``0},System.Boolean,System.Int64,System.Int64,System.IntPtr,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to write data to a <c>ComputeBuffer</c>.
            </summary>
            <param name="buffer"> The buffer to write to. </param>
            <param name="blocking"> The mode of operation of this call. </param>
            <param name="offset"> The offset in elements where writing starts. </param>
            <param name="count"> The number of elements to write. </param>
            <param name="data"> The content written to the <c>ComputeBuffer</c>. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after enqueueing the command in the <c>ComputeCommandQueue</c>. </remarks>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Write(Cloo.ComputeImage,System.Boolean,System.IntPtr,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Write(Cloo.ComputeImage,System.Boolean,System.Int64[],System.Int64[],System.IntPtr,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Deprecated. Use the full version instead.
            </summary>
        </member>
        <member name="M:Cloo.ComputeCommandQueue.Write(Cloo.ComputeImage,System.Boolean,System.Int64[],System.Int64[],System.Int64,System.Int64,System.IntPtr,System.Collections.Generic.ICollection{Cloo.ComputeEvent})">
            <summary>
            Enqueues a command to write data to a <c>ComputeImage</c>.
            </summary>
            <param name="image"> The <c>ComputeImage</c> to write to. </param>
            <param name="blocking"> The mode of operation of this call. </param>
            <param name="offset"> The (x, y, z) offset in pixels where writing starts. </param>
            <param name="region"> The region (width, height, depth) in pixels to write. </param>
            <param name="rowPitch"> The <c>ComputeImage.RowPitch</c> or 0. </param>
            <param name="slicePitch"> The <c>ComputeImage.SlicePitch</c> or 0. </param>
            <param name="data"> The content written to the <c>ComputeImage</c>. </param>
            <param name="events"> A collection of <c>ComputeEvent</c>s that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> a new <c>ComputeEvent</c> identifying this command is attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after enqueueing the command in the <c>ComputeCommandQueue</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeCommandQueue.Context">
            <summary>
            Gets the <c>ComputeContext</c> of the <c>ComputeCommandQueue</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeCommandQueue.Device">
            <summary>
            Gets the <c>ComputeDevice</c> of the <c>ComputeCommandQueue</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeCommandQueue.OutOfOrderExecution">
            <summary>
            Gets or sets the out-of-order execution mode of the commands in the <c>ComputeCommandQueue</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeCommandQueue.Profiling">
            <summary>
            Gets or sets the profiling mode of the commands in the <c>ComputeCommandQueue</c>.
            </summary>
        </member>
        <member name="T:Cloo.ComputeBuffer`1">
            <summary>
            Represents an OpenCL buffer.
            </summary>
            <typeparam name="T"> The type of the elements of the <c>ComputeBuffer</c>. </typeparam>
            <remarks> A memory object that stores a linear collection of bytes. Buffer objects are accessible using a pointer in a kernel executing on a device. </remarks>
            <seealso cref="T:Cloo.ComputeDevice"/>
            <seealso cref="T:Cloo.ComputeKernel"/>
            <seealso cref="T:Cloo.ComputeMemory"/>
        </member>
        <member name="M:Cloo.ComputeBuffer`1.#ctor(Cloo.ComputeContext,Cloo.ComputeMemoryFlags,System.Int64)">
            <summary>
            Creates a new <c>ComputeBuffer</c>.
            </summary>
            <param name="context"> A <c>ComputeContext</c> used to create the <c>ComputeBuffer</c>. </param>
            <param name="flags"> A bit-field that is used to specify allocation and usage information about the <c>ComputeBuffer</c>. </param>
            <param name="count"> The number of elements of the <c>ComputeBuffer</c>. </param>
        </member>
        <member name="M:Cloo.ComputeBuffer`1.#ctor(Cloo.ComputeContext,Cloo.ComputeMemoryFlags,System.Int64,System.IntPtr)">
            <summary>
            Creates a new <c>ComputeBuffer</c>.
            </summary>
            <param name="context"> A <c>ComputeContext</c> used to create the <c>ComputeBuffer</c>. </param>
            <param name="flags"> A bit-field that is used to specify allocation and usage information about the <c>ComputeBuffer</c>. </param>
            <param name="count"> The number of elements of the <c>ComputeBuffer</c>. </param>
            <param name="dataPtr"> A pointer to the data for the <c>ComputeBuffer</c>. </param>
        </member>
        <member name="M:Cloo.ComputeBuffer`1.#ctor(Cloo.ComputeContext,Cloo.ComputeMemoryFlags,`0[])">
            <summary>
            Creates a new <c>ComputeBuffer</c>.
            </summary>
            <param name="context"> A <c>ComputeContext</c> used to create the <c>ComputeBuffer</c>. </param>
            <param name="flags"> A bit-field that is used to specify allocation and usage information about the <c>ComputeBuffer</c>. </param>
            <param name="data"> The data for the <c>ComputeBuffer</c>. </param>
        </member>
        <member name="M:Cloo.ComputeBuffer`1.CreateFromGLBuffer``1(Cloo.ComputeContext,Cloo.ComputeMemoryFlags,System.Int32)">
            <summary>
            Creates a new <c>ComputeBuffer</c> from an existing OpenGL buffer object.
            </summary>
            <typeparam name="T"> The type of the elements of the <c>ComputeBuffer</c>. It is recommended, though not required, that <typeparamref name="T"/> matches the type of the elements in the OpenGL buffer. </typeparam>
            <param name="context"> A <c>ComputeContext</c> with enabled CL/GL sharing. </param>
            <param name="flags"> A bit-field that is used to specify usage information about the <c>ComputeBuffer</c>. Only <c>ComputeMemoryFlags.ReadOnly</c>, <c>ComputeMemoryFlags.WriteOnly</c> and <c>ComputeMemoryFlags.ReadWrite</c> are allowed. </param>
            <param name="bufferId"> The OpenGL buffer object id to use for the creation of the <c>ComputeBuffer</c>. </param>
            <returns> The created <c>ComputeBuffer</c>. </returns>
        </member>
        <member name="M:Cloo.ComputeBuffer`1.ToString">
            <summary>
            Gets the string representation of the <c>ComputeBuffer</c>.
            </summary>
            <returns> The string representation of the <c>ComputeBuffer</c>. </returns>
        </member>
        <member name="P:Cloo.ComputeBuffer`1.Count">
            <summary>
            Gets the number of elements in the <c>ComputeBuffer</c>.
            </summary>
        </member>
        <member name="T:Cloo.ComputeProgram">
            <summary>
            Represents an OpenCL program.
            </summary>
            <remarks> An OpenCL program consists of a set of kernels. Programs may also contain auxiliary functions called by the kernel functions and constant data. </remarks>
            <seealso cref="T:Cloo.ComputeKernel"/>
        </member>
        <member name="M:Cloo.ComputeProgram.#ctor(Cloo.ComputeContext,System.String)">
            <summary>
            Creates a new <c>ComputeProgram</c> from a source code string.
            </summary>
            <param name="context"> A <c>ComputeContext</c>. </param>
            <param name="source"> The source code for the <c>ComputeProgram</c>. </param>
            <remarks> The created <c>ComputeProgram</c> is associated with the <c>ComputeContext.Devices</c>. </remarks>
        </member>
        <member name="M:Cloo.ComputeProgram.#ctor(Cloo.ComputeContext,System.String[])">
            <summary>
            Creates a new <c>ComputeProgram</c> from an array of source code strings.
            </summary>
            <param name="context"> A <c>ComputeContext</c>. </param>
            <param name="source"> The source code lines for the <c>ComputeProgram</c>. </param>
            <remarks> The created <c>ComputeProgram</c> is associated with the <c>ComputeContext.Devices</c>. </remarks>
        </member>
        <member name="M:Cloo.ComputeProgram.#ctor(Cloo.ComputeContext,System.Collections.Generic.IList{System.Byte[]},System.Collections.Generic.IList{Cloo.ComputeDevice})">
            <summary>
            Creates a new <c>ComputeProgram</c> from a specified list of binaries.
            </summary>
            <param name="context"> A <c>ComputeContext</c>. </param>
            <param name="binaries"> A list of binaries, one for each item in <paramref name="devices"/>. </param>
            <param name="devices"> A subset of the <c>ComputeContext.Devices</c>. If <paramref name="devices"/> is <c>null</c>, OpenCL will associate every binary from <c>ComputeProgram.Binaries</c> with a corresponding <c>ComputeDevice</c> from <c>ComputeContext.Devices</c>. </param>
        </member>
        <member name="M:Cloo.ComputeProgram.Build(System.Collections.Generic.ICollection{Cloo.ComputeDevice},System.String,Cloo.ComputeProgramBuildNotifier,System.IntPtr)">
            <summary>
            Builds (compiles and links) a program executable from the program source or binary for all or some of the <c>ComputeProgram.Devices</c>.
            </summary>
            <param name="devices"> A subset or all of the <c>ComputeProgram.Devices</c>. If <paramref name="devices"/> is <c>null</c>, the executable is built for every item of the <c>ComputeProgram.Devices</c> for which a source or a binary has been loaded. </param>
            <param name="options"> A set of options for the OpenCL compiler. </param>
            <param name="notify"> A notification routine. The notification routine is a callback function that an application can register and which will be called when the program executable has been built (successfully or unsuccessfully). If <paramref name="notify"/> is not <c>null</c>, <c>ComputeProgram.Build</c> does not need to wait for the build to complete and can return immediately. If <paramref name="notify"/> is <c>null</c>, <c>ComputeProgram.Build</c> does not return until the build has completed. This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. </param>
            <param name="notifyDataPtr"> Optional user data that will be passed to <paramref name="notify"/>. </param>
        </member>
        <member name="M:Cloo.ComputeProgram.CreateAllKernels">
            <summary>
            Creates a <c>ComputeKernel</c> for every <c>kernel</c> function in <c>ComputeProgram</c>.
            </summary>
            <returns> The collection of created <c>ComputeKernel</c>s. </returns>
            <remarks> <c>ComputeKernel</c>s are not created for any <c>kernel</c> functions in <c>ComputeProgram</c> that do not have the same function definition across all <c>ComputeProgram.Devices</c> for which a program executable has been successfully built. </remarks>
        </member>
        <member name="M:Cloo.ComputeProgram.CreateKernel(System.String)">
            <summary>
            Creates a <c>ComputeKernel</c> for a kernel function of a specified name.
            </summary>
            <returns> The created <c>ComputeKernel</c>. </returns>
        </member>
        <member name="M:Cloo.ComputeProgram.GetBuildLog(Cloo.ComputeDevice)">
            <summary>
            Gets the build log of the <c>ComputeProgram</c> for a specified <c>ComputeDevice</c>.
            </summary>
            <param name="device"> The <c>ComputeDevice</c> building the <c>ComputeProgram</c>. Must be one of <c>ComputeProgram.Devices</c>. </param>
            <returns> The build log of the <c>ComputeProgram</c> for <paramref name="device"/>. </returns>
        </member>
        <member name="M:Cloo.ComputeProgram.GetBuildStatus(Cloo.ComputeDevice)">
            <summary>
            Gets the <c>ComputeProgramBuildStatus</c> of the <c>ComputeProgram</c> for a specified <c>ComputeDevice</c>.
            </summary>
            <param name="device"> The <c>ComputeDevice</c> building the <c>ComputeProgram</c>. Must be one of <c>ComputeProgram.Devices</c>. </param>
            <returns> The <c>ComputeProgramBuildStatus</c> of the <c>ComputeProgram</c> for <paramref name="device"/>. </returns>
        </member>
        <member name="M:Cloo.ComputeProgram.ToString">
            <summary>
            Gets the string representation of the <c>ComputeProgram</c>.
            </summary>
            <returns> The string representation of the <c>ComputeProgram</c>. </returns>
        </member>
        <member name="P:Cloo.ComputeProgram.Binaries">
            <summary>
            Gets a read-only collection of program binaries associated with the <c>ComputeProgram.Devices</c>.
            </summary>
            <remarks> The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. </remarks>
        </member>
        <member name="P:Cloo.ComputeProgram.BuildOptions">
            <summary>
            Gets the <c>ComputeProgram</c> build options as specified in <paramref name="options"/> argument of <c>ComputeProgram.Build</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeProgram.Context">
            <summary>
            Gets the <c>ComputeContext</c> of the <c>ComputeProgram</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeProgram.Devices">
            <summary>
            Gets a read-only collection of <c>ComputeDevice</c>s associated with the <c>ComputeProgram</c>.
            </summary>
            <remarks> This collection contains <c>ComputeDevice</c>s from <c>ComputeProgram.Context.Devices</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeProgram.Source">
            <summary>
            Gets a read-only collection of program source code strings specified when creating the <c>ComputeProgram</c> or <c>null</c> if <c>ComputeProgram</c> was created using program binaries.
            </summary>
        </member>
        <member name="T:Cloo.ComputeProgramBuildNotifier">
            <summary>
            A callback function that can be registered by the application to report the <c>ComputeProgram</c> build status.
            </summary>
            <param name="programHandle"> The handle of the <c>ComputeProgram</c> being built. </param>
            <param name="notifyDataPtr"> The pointer to the optional user data specified in <paramref name="notifyDataPtr"/> argument of <c>ComputeProgram.Build</c>. </param>
            <remarks> This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. </remarks>
        </member>
        <member name="T:Cloo.ComputeImageFormat">
            <summary>
            Represents an OpenCL image format.
            </summary>
            <remarks> This structure defines the type, count and size of the image channels. </remarks>
            <seealso cref="T:Cloo.ComputeImage"/>
        </member>
        <member name="M:Cloo.ComputeImageFormat.#ctor(Cloo.ComputeImageChannelOrder,Cloo.ComputeImageChannelType)">
            <summary>
            Creates a new <c>ComputeImageFormat</c>.
            </summary>
            <param name="channelOrder"> The number of channels and the channel layout i.e. the memory layout in which channels are stored in the <c>ComputeImage</c>. </param>
            <param name="channelType"> The type of the channel data. The number of bits per element determined by the <paramref name="channelType"/> and <paramref name="channelOrder"/> must be a power of two. </param>
        </member>
        <member name="P:Cloo.ComputeImageFormat.ChannelOrder">
            <summary>
            Gets the <c>ComputeImageChannleOrder</c> of the <c>ComputeImage</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeImageFormat.ChannelType">
            <summary>
            Gets the <c>ComputeImageChannelType</c> of the <c>ComputeImage</c>.
            </summary>
        </member>
        <member name="T:Cloo.ComputeDevice">
            <summary>
            Represents an OpenCL device.
            </summary>
            <remarks> A device is a collection of compute units. A command-queue is used to queue commands to a device. Examples of commands include executing kernels, or reading and writing memory objects. OpenCL devices typically correspond to a GPU, a multi-core CPU, and other processors such as DSPs and the Cell/B.E. processor. </remarks>
            <seealso cref="T:Cloo.ComputeCommandQueue"/>
            <seealso cref="T:Cloo.ComputeKernel"/>
            <seealso cref="T:Cloo.ComputeMemory"/>
            <seealso cref="T:Cloo.ComputePlatform"/>
        </member>
        <member name="M:Cloo.ComputeDevice.ToString">
            <summary>
            Gets the string representation of the <c>ComputeDevice</c>.
            </summary>
            <returns> The string representation of the <c>ComputeDevice</c>. </returns>
        </member>
        <member name="P:Cloo.ComputeDevice.AddressBits">
            <summary>
            Gets the default <c>ComputeDevice</c> address space size in bits.
            </summary>
            <remarks> Currently supported values are 32 or 64 bits. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.Available">
            <summary>
            Gets the availability state of the <c>ComputeDevice</c>.
            </summary>
            <remarks> Is <c>true</c> if the <c>ComputeDevice</c> is available and <c>false</c> if the <c>ComputeDevice</c> is not available. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.CommandQueueFlags">
            <summary>
            Gets the <c>ComputeCommandQueueFlags</c> supported by the <c>ComputeDevice</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.CompilerAvailable">
            <summary>
            Gets the availability state of the OpenCL compiler of the <c>ComputeDevice.Platform</c>.
            </summary>
            <remarks> Is <c>false</c> if the implementation does not have a compiler available to compile the program source. Is <c>true</c> if the compiler is available. This can be <c>false</c> for the embededed platform profile only. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.DriverVersion">
            <summary>
            Gets the OpenCL software driver version string of the <c>ComputeDevice</c>.
            </summary>
            <remarks> The version string is in the form <c>major_number.minor_number</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.EndianLittle">
            <summary>
            Gets the endianness of the <c>ComputeDevice</c>.
            </summary>
            <remarks> Is <c>true</c> if the <c>ComputeDevice</c> is a little endian device and <c>false</c> otherwise. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.ErrorCorrectionSupport">
            <summary>
            Gets the error correction support state of the <c>ComputeDevice</c>.
            </summary>
            <remarks> Is <c>true</c> if the <c>ComputeDevice</c> implements error correction for the memories, caches, registers etc. Is <c>false</c> if the <c>ComputeDevice</c> does not implement error correction. This can be a requirement for certain clients of OpenCL. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.ExecutionCapabilities">
            <summary>
            Gets the <c>ComputeDeviceExecutionCapabilities</c> of the <c>ComputeDevice</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.Extensions">
            <summary>
            Gets a read-only collection of names of extensions that the <c>ComputeDevice</c> supports.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.GlobalMemoryCacheLineSize">
            <summary>
            Gets the size of the global <c>ComputeDevice</c> memory cache line in bytes.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.GlobalMemoryCacheSize">
            <summary>
            Gets the size of the global <c>ComputeDevice</c> memory cache in bytes.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.GlobalMemoryCacheType">
            <summary>
            Gets the <c>ComputeDeviceMemoryCacheType</c> of the <c>ComputeDevice</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.GlobalMemorySize">
            <summary>
            Gets the size of the global <c>ComputeDevice</c> memory in bytes.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.Image2DMaxHeight">
            <summary>
            Maximum height of 2D images that the <c>ComputeDevice</c> supports in pixels.
            </summary>
            <remarks> The minimum value is 8192 if <c>ComputeDevice.ImageSupport</c> is <c>true</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.Image2DMaxWidth">
            <summary>
            Maximum width of 2D image that the <c>ComputeDevice</c> supports in pixels.
            </summary>
            <remarks> The minimum value is 8192 if <c>ComputeDevice.ImageSupport</c> is <c>true</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.Image3DMaxDepth">
            <summary>
            Maximum depth of 3D image the <c>ComputeDevice</c> supports in pixels.
            </summary>
            <remarks> The minimum value is 2048 if <c>ComputeDevice.ImageSupport</c> is <c>true</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.Image3DMaxHeight">
            <summary>
            Max height of 3D image the <c>ComputeDevice</c> supports in pixels.
            </summary>
            <remarks> The minimum value is 2048 if <c>ComputeDevice.ImageSupport</c> is <c>true</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.Image3DMaxWidth">
            <summary>
            Max width of 3D image the <c>ComputeDevice</c> supports in pixels.
            </summary>
            <remarks> The minimum value is 2048 if <c>ComputeDevice.ImageSupport</c> is <c>true</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.ImageSupport">
            <summary>
            Gets the state of image support of the <c>ComputeDevice</c>.
            </summary>
            <remarks> Is <c>true</c> if <c>ComputeImage</c>s are supported by the <c>ComputeDevice</c> and <c>false</c> otherwise. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.LocalMemorySize">
            <summary>
            Gets the size of local memory are of the <c>ComputeDevice</c> in bytes.
            </summary>
            <remarks> The minimum value is 16 KB. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.LocalMemoryType">
            <summary>
            Gets the <c>ComputeDeviceLocalMemoryType</c> that is supported on the <c>ComputeDevice</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxClockFrequency">
            <summary>
            Gets the maximum configured clock frequency of the <c>ComputeDevice</c> in MHz.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxComputeUnits">
            <summary>
            Gets the number of parallel compute cores on the <c>ComputeDevice</c>.
            </summary>
            <remarks> The minimum value is 1. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxConstantArguments">
            <summary>
            Gets the maximum number of arguments declared with the <c>__constant</c> or <c>constant</c> qualifier in a <c>ComputeKernel</c> executing in the <c>ComputeDevice</c>.
            </summary>
            <remarks> The minimum value is 8. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxConstantBufferSize">
            <summary>
            Gets the maximum size in bytes of a constant buffer allocation in the <c>ComputeDevice</c> memory.
            </summary>
            <remarks>  The minimum value is 64 KB. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxMemoryAllocationSize">
            <summary>
            Gets the maximum size of memory object allocation in the <c>ComputeDevice</c> memory in bytes.
            </summary>
            <remarks> The minimum value is <c>max(ComputeDevice.GlobalMemorySize/4, 128*1024*1024)</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxParameterSize">
            <summary>
            Gets the maximum size in bytes of the arguments that can be passed to a <c>ComputeKernel</c> executing in the <c>ComputeDevice</c>.
            </summary>
            <remarks> The minimum value is 256. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxReadImageArguments">
            <summary>
            Gets the maximum number of simultaneous <c>ComputeImage</c>s that can be read by a <c>ComputeKernel</c> executing in the <c>ComputeDevice</c>.
            </summary>
            <remarks> The minimum value is 128 if <c>ComputeDevice.ImageSupport</c> is <c>true</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxSamplers">
            <summary>
            Gets the maximum number of <c>ComputeSampler</c>s that can be used in a <c>ComputeKernel</c>.
            </summary>
            <remarks> The minimum value is 16 if <c>ComputeDevice.ImageSupport</c> is <c>true</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxWorkGroupSize">
            <summary>
            Gets the maximum number of work-items in a work-group executing a <c>ComputeKernel</c> in a <c>ComputeDevice</c> using the data parallel execution model.
            </summary>
            <remarks> The minimum value is 1. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxWorkItemDimensions">
            <summary>
            Gets the maximum number of dimensions that specify the global and local work-item IDs used by the data parallel execution model.
            </summary>
            <remarks> The minimum value is 3. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxWorkItemSizes">
            <summary>
            Gets the maximum number of work-items that can be specified in each dimension of the <paramref name="globalWorkSize"/> argument of <c>ComputeCommandQueue.Execute</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.MaxWriteImageArguments">
            <summary>
            Gets the maximum number of simultaneous <c>ComputeImage</c>s that can be written to by a <c>ComputeKernel</c> executing in the <c>ComputeDevice</c>.
            </summary>
            <remarks> The minimum value is 8 if <c>ComputeDevice.ImageSupport</c> is <c>true</c>. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.MemoryBaseAddressAlignment">
            <summary>
            Gets the alignment in bits of the base address of any <c>ComputeMemory</c> allocated in the <c>ComputeDevice</c> memory.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.MinDataTypeAlignmentSize">
            <summary>
            Gets the smallest alignment in bytes which can be used for any data type allocated in the <c>ComputeDevice</c> memory.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.Name">
            <summary>
            Gets the name of the <c>ComputeDevice</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.Platform">
            <summary>
            Gets the <c>ComputePlatform</c> associated with the <c>ComputeDevice</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.PreferredVectorWidthDouble">
            <summary>
            Gets the <c>ComputeDevice</c>'s preferred native vector width size for vector of <c>double</c>s.
            </summary>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.PreferredVectorWidthFloat">
            <summary>
            Gets the <c>ComputeDevice</c>'s preferred native vector width size for vector of <c>float</c>s.
            </summary>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.PreferredVectorWidthChar">
            <summary>
            Gets the <c>ComputeDevice</c>'s preferred native vector width size for vector of <c>char</c>s.
            </summary>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.PreferredVectorWidthInt">
            <summary>
            Gets the <c>ComputeDevice</c>'s preferred native vector width size for vector of <c>int</c>s.
            </summary>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.PreferredVectorWidthLong">
            <summary>
            Gets the <c>ComputeDevice</c>'s preferred native vector width size for vector of <c>long</c>s.
            </summary>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.PreferredVectorWidthShort">
            <summary>
            Gets the <c>ComputeDevice</c>'s preferred native vector width size for vector of <c>short</c>s.
            </summary>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.Profile">
            <summary>
            Gets the OpenCL profile name supported by the <c>ComputeDevice</c>.
            </summary>
            <remarks> 
            The profile name returned can be one of the following strings:
            <list type="bullets">
            <item>
                <term> FULL_PROFILE </term>
                <description> The <c>ComputeDevice</c> supports the OpenCL specification (functionality defined as part of the core specification and does not require any extensions to be supported). </description>
            </item>
            <item>
                <term> EMBEDDED_PROFILE </term>
                <description> The <c>ComputeDevice</c> supports the OpenCL embedded profile. </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.ProfilingTimerResolution">
            <summary>
            Gets the resolution of the <c>ComputeDevice</c> timer in nanoseconds.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.SingleCapabilites">
            <summary>
            Gets the <c>ComputeDeviceSingleCapabilities</c> of the <c>ComputeDevice</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.Type">
            <summary>
            Gets the <c>ComputeDeviceTypes</c> of the <c>ComputeDevice</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.Vendor">
            <summary>
            Gets the <c>ComputeDevice</c> vendor name string.
            </summary>
        </member>
        <member name="P:Cloo.ComputeDevice.VendorId">
            <summary>
            Gets a unique <c>ComputeDevice</c> vendor identifier.
            </summary>
            <remarks> An example of a unique device identifier could be the PCIe ID. </remarks>
        </member>
        <member name="P:Cloo.ComputeDevice.Version">
            <summary>
            Gets the OpenCL version supported by the <c>ComputeDevice</c>.
            </summary>
            <remarks> This version string has the following format: <c>OpenCL[space][major_version].[minor_version][space][vendor-specific information]</c> </remarks>
        </member>
        <member name="T:Cloo.Bindings.Clx">
            <summary>
            Contains bindings to the OpenCL extension functions.
            </summary>
            <remarks> See the Khronos OpenCL API extensions registry for documentation regarding these functions. </remarks>
        </member>
        <member name="T:Cloo.ComputePlatform">
            <summary>
            Represents an OpenCL platform.
            </summary>
            <remarks> The host plus a collection of devices managed by the OpenCL framework that allow an application to share resources and execute kernels on devices in the platform. </remarks>
            <seealso cref="T:Cloo.ComputeDevice"/>
            <seealso cref="T:Cloo.ComputeKernel"/>
            <seealso cref="T:Cloo.ComputeResource"/>
        </member>
        <member name="M:Cloo.ComputePlatform.GetByHandle(System.IntPtr)">
            <summary>
            Gets a <c>ComputePlatform</c> of a specified handle.
            </summary>
            <param name="handle"> The handle of the queried <c>ComputePlatform</c>. </param>
            <returns> The <c>ComputePlatform</c> of the matching handle or <c>null</c> if none matches. </returns>
        </member>
        <member name="M:Cloo.ComputePlatform.GetByName(System.String)">
            <summary>
            Gets the first matching <c>ComputePlatform</c> of a specified name.
            </summary>
            <param name="platformName"> The name of the queried <c>ComputePlatform</c>. </param>
            <returns> The first <c>ComputePlatform</c> of the specified name or <c>null</c> if none matches. </returns>
        </member>
        <member name="M:Cloo.ComputePlatform.GetByVendor(System.String)">
            <summary>
            Gets the first matching <c>ComputePlatform</c> of a specified vendor.
            </summary>
            <param name="platformVendor"> The vendor of the queried <c>ComputePlatform</c>. </param>
            <returns> The first <c>ComputePlatform</c> of the specified vendor or <c>null</c> if none matches. </returns>
        </member>
        <member name="M:Cloo.ComputePlatform.QueryDevices">
            <summary>
            Gets a read-only collection of available <c>ComputeDevice</c>s on the <c>ComputePlatform</c>.
            </summary>
            <returns> A read-only collection of the available <c>ComputeDevice</c>s on the <c>ComputePlatform</c>. </returns>
            <remarks> This method resets the <c>ComputePlatform.Devices</c>. This is useful if one or more of them become unavailable (<c>ComputeDevice.Available</c> is <c>false</c>) after a <c>ComputeContext</c> and <c>ComputeCommandQueue</c>s that use the <c>ComputeDevice</c> have been created and commands have been queued to them. Further calls will trigger an <c>OutOfResourcesComputeException</c> until this method is executed. You will also need to recreate any <c>ComputeResource</c> that was created on the no longer available <c>ComputeDevice</c>. </remarks>
        </member>
        <member name="M:Cloo.ComputePlatform.ToString">
            <summary>
            Gets the string representation of the <c>ComputePlatform</c>.
            </summary>
            <returns> The string representation of the <c>ComputePlatform</c>. </returns>
        </member>
        <member name="P:Cloo.ComputePlatform.Devices">
            <summary>
            Gets a read-only collection of <c>ComputeDevice</c>s available on the <c>ComputePlatform</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputePlatform.Extensions">
            <summary>
            Gets a read-only collection of extension names supported by the <c>ComputePlatform</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputePlatform.Name">
            <summary>
            Gets the <c>ComputePlatform</c> name.
            </summary>
        </member>
        <member name="P:Cloo.ComputePlatform.Platforms">
            <summary>
            Gets a read-only collection of available <c>ComputePlatform</c>s.
            </summary>
        </member>
        <member name="P:Cloo.ComputePlatform.Profile">
            <summary>
            Gets the name of the profile supported by the <c>ComputePlatform</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputePlatform.Vendor">
            <summary>
            Gets the <c>ComputePlatform</c> vendor.
            </summary>
        </member>
        <member name="P:Cloo.ComputePlatform.Version">
            <summary>
            Gets the OpenCL version supported by the <c>ComputePlatform</c>.
            </summary>
        </member>
        <member name="T:Cloo.ComputeContextPropertyList">
            <summary>
            Represents a list of <c>ComputeContextProperty</c>s.
            </summary>
            <remarks> A <c>ComputeContextPropertyList</c> is used to specify the properties of a <c>ComputeContext</c>. </remarks>
            <seealso cref="T:Cloo.ComputeContext"/>
            <seealso cref="T:Cloo.ComputeContextProperty"/>
        </member>
        <member name="M:Cloo.ComputeContextPropertyList.#ctor(Cloo.ComputePlatform)">
            <summary>
            Creates a new <c>ComputeContextPropertyList</c> which contains a single item specifying a <c>ComputePlatform</c>.
            </summary>
            <param name="platform"> A <c>ComputePlatform</c>. </param>
        </member>
        <member name="M:Cloo.ComputeContextPropertyList.#ctor(System.Collections.Generic.IEnumerable{Cloo.ComputeContextProperty})">
            <summary>
            Creates a new <c>ComputeContextPropertyList</c> which contains the specified <c>ComputeContextProperty</c>s.
            </summary>
            <param name="properties"> An enumerable of <c>ComputeContextProperty</c>'s. </param>
        </member>
        <member name="M:Cloo.ComputeContextPropertyList.GetByName(Cloo.ComputeContextPropertyName)">
            <summary>
            Gets a <c>ComputeContextProperty</c> of a specified <c>ComputeContextPropertyName</c>.
            </summary>
            <param name="name"> The <c>ComputeContextPropertyName</c> of the <c>ComputeContextProperty</c>. </param>
            <returns> The requested <c>ComputeContextProperty</c> or <c>null</c> if no such <c>ComputeContextProperty</c> exists in the <c>ComputeContextPropertyList</c>. </returns>
        </member>
        <member name="T:Cloo.ComputeErrorCode">
            <summary>
            The OpenCL error codes.
            </summary>
        </member>
        <member name="T:Cloo.OpenCLVersion">
            <summary>
            The OpenCL version.
            </summary>
        </member>
        <member name="T:Cloo.ComputeBoolean">
            <summary>
            The OpenCL boolean values expressed as ints.
            </summary>
        </member>
        <member name="T:Cloo.ComputePlatformInfo">
            <summary>
            The platform info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeDeviceTypes">
            <summary>
            The types of devices.
            </summary>
        </member>
        <member name="T:Cloo.ComputeDeviceInfo">
            <summary>
            The device info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeContextInfo">
            <summary>
            The context info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeCommandQueueInfo">
            <summary>
            The command-queue info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeMemoryInfo">
            <summary>
            The memory info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeImageInfo">
            <summary>
            The image info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeSamplerInfo">
            <summary>
            The sampler info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeProgramInfo">
            <summary>
            The program info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeProgramBuildInfo">
            <summary>
            The program build info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeKernelInfo">
            <summary>
            The kernel info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeKernelWorkGroupInfo">
            <summary>
            The kernel work-group info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeEventInfo">
            <summary>
            The event info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeCommandProfilingInfo">
            <summary>
            The command profiling info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeGLTextureInfo">
            <summary>
            The shared CL/GL image/texture info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeGLContextInfo">
            <summary>
            The shared CL/GL context info query symbols.
            </summary>
        </member>
        <member name="T:Cloo.ComputeSampler">
            <summary>
            Represents an OpenCL sampler.
            </summary>
            <remarks> An object that describes how to sample an image when the image is read in the kernel. The image read functions take a sampler as an argument. The sampler specifies the image addressing-mode i.e. how out-of-range image coordinates are handled, the filtering mode, and whether the input image coordinate is a normalized or unnormalized value. </remarks>
            <seealso cref="T:Cloo.ComputeImage"/>
        </member>
        <member name="M:Cloo.ComputeSampler.#ctor(Cloo.ComputeContext,System.Boolean,Cloo.ComputeImageAddressing,Cloo.ComputeImageFiltering)">
            <summary>
            Creates a new <c>ComputeSampler</c>.
            </summary>
            <param name="context"> A <c>ComputeContext</c>. </param>
            <param name="normalizedCoords"> The usage state of normalized coordinates when accessing a <c>ComputeImage</c> in a <c>ComputeKernel</c>. </param>
            <param name="addressing"> The <c>ComputeImageAddressing</c> mode of the <c>ComputeSampler</c>. Specifies how out-of-range image coordinates are handled while reading. </param>
            <param name="filtering"> The <c>ComputeImageFiltering</c> mode of the <c>ComputeSampler</c>. Specifies the type of filter that must be applied when reading data from an image. </param>
        </member>
        <member name="M:Cloo.ComputeSampler.ToString">
            <summary>
            Gets the string representation of the <c>ComputeSampler</c>.
            </summary>
            <returns> The string representation of the <c>ComputeSampler</c>. </returns>
        </member>
        <member name="P:Cloo.ComputeSampler.Context">
            <summary>
            Gets the <c>ComputeContext</c> of the <c>ComputeSampler</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeSampler.Addressing">
            <summary>
            Gets the <c>ComputeImageAddressing</c> mode of the <c>ComputeSampler</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeSampler.Filtering">
            <summary>
            Gets the <c>ComputeImageFiltering</c> mode of the <c>ComputeSampler</c>.
            </summary>
        </member>
        <member name="P:Cloo.ComputeSampler.NormalizedCoords">
            <summary>
            Gets the state of usage of normalized x, y and z coordinates when accessing a <c>ComputeImage</c> in a <c>ComputeKernel</c> through the <c>ComputeSampler</c>.
            </summary>
        </member>
        <member name="T:Cloo.ComputeException">
            <summary>
            Represents an error state that occurred while executing an OpenCL API call.
            </summary>
            <seealso cref="P:Cloo.ComputeException.ComputeErrorCode"/>
        </member>
        <member name="M:Cloo.ComputeException.#ctor(Cloo.ComputeErrorCode)">
            <summary>
            Creates a new <c>ComputeException</c> with a specified <c>ComputeErrorCode</c>.
            </summary>
            <param name="code"> A <c>ComputeErrorCode</c>. </param>
        </member>
        <member name="M:Cloo.ComputeException.ThrowOnError(System.Int32)">
            <summary>
            Checks for an OpenCL error code and throws a <c>ComputeException</c> if such is encountered.
            </summary>
            <param name="errorCode"> The value to be checked for an OpenCL error. </param>
        </member>
        <member name="M:Cloo.ComputeException.ThrowOnError(Cloo.ComputeErrorCode)">
            <summary>
            Checks for an OpenCL error code and throws a <c>ComputeException</c> if such is encountered.
            </summary>
            <param name="errorCode"> The OpenCL error code. </param>
        </member>
        <member name="P:Cloo.ComputeException.ComputeErrorCode">
            <summary>
            Gets the <c>ComputeErrorCode</c> of the <c>ComputeException</c>.
            </summary>
        </member>
    </members>
</doc>
